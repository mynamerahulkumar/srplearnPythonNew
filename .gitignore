.DS_STORE
node_modules
scripts/flow/*/.flowconfig
.flowconfig
*~
*.pyc
.grunt
_SpecRunner.html
__benchmarks__
build/
remote-repo/
coverage/
.module-cache
fixtures/dom/public/react-dom.js
fixtures/dom/public/react.js
test/the-files-to-test.generated.js
*.log*
chrome-user-data
*.sublime-project
*.sublime-workspace
.idea
*.iml
.vscode
*.swp
*.swo
/dist 
/.parcel-cache

packages/react-devtools-core/dist
packages/react-devtools-extensions/chrome/build
packages/react-devtools-extensions/chrome/*.crx
packages/react-devtools-extensions/chrome/*.pem
packages/react-devtools-extensions/firefox/build
packages/react-devtools-extensions/firefox/*.xpi
packages/react-devtools-extensions/firefox/*.pem
packages/react-devtools-extensions/shared/build
packages/react-devtools-extensions/.tempUserDataDir
packages/react-devtools-inline/dist
packages/react-devtools-shell/dist
packages/react-devtools-timeline/dist
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release
# Dependency directories
node_modules/
jspm_packages/
# Distribution directories
dist/
# Typescript v1 declaration files
typings/
# Optional npm cache directory
.npm
# Optional eslint cache
.eslintcache
# Optional REPL history
.node_repl_history
# Output of 'npm pack'
*.tgz
# Yarn Integrity file
.yarn-integrity
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
# C extensions
*.so
# Distribution / packaging
.Python
develop-eggs/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec
# Installer logs
pip-log.txt
pip-delete-this-directory.txt
# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
# Translations
*.mo
*.pot
# Django stuff:
local_settings.py
db.sqlite3
db.sqlite3-journal
# Flask stuff:
instance/
.webassets-cache
# Scrapy stuff:
.scrapy
# Sphinx documentation
docs/_build/
# PyBuilder
.pybuilder/
target/
# Jupyter Notebook
.ipynb_checkpoints
# IPython
profile_default/
ipython_config.py
# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version
# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock
# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/
# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/
# Celery stuff
celerybeat-schedule
celerybeat.pid
# SageMath parsed files
*.sage.py
# Environments
.env
*.env
*.venv
.venv
env/
venv/
*env/
*venv/
**/venv/
**/.env/
**/env/
ENV/
env.bak/
venv.bak/
# Spyder project settings
.spyderproject
.spyproject
# Rope project settings
.ropeproject
# mkdocs documentation
/site
# mypy
.mypy_cache/
.dmypy.json
dmypy.json
# Pyre type checker
.pyre/
# pytype static type analyzer
.pytype/
# Cython debug symbols
cython_debug/
# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
target
dist
public
.DS_Store
.next
yarn-error.log
npm-debug.log
# Runtime data
pids
*.pid
*.seed
# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov
# Coverage directory used by tools like istanbul
coverage
# nyc test coverage
.nyc_output
# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
# node-waf configuration
.lock-wscript
jspm_packages
# General Python
*.pyo
*.pyd
*.db
*.bak
# Virtual environment
.venv/
# Jupyter Notebooks checkpoints
.ipynb_checkpoints/
# Python distribution packages
pip-wheel-metadata/
# Ignore large datasets and model files (audio, video, models)
*.wav
*.mp3
*.flac
*.ogg
*.m4a
*.mp4
*.avi
*.mov
*.mkv
*.h5  # Model files (Keras)
*.pkl  # Model files (Pickle)
*.pt  # PyTorch model files
*.hdf5  # Keras model files
*.tar.gz
*.zip
# Ignore large training data files
train_data/
test_data/
data/
datasets/
# Temporary files created by ML tools
output/
logs/
# PyTorch and TensorFlow checkpoints
*.ckpt
*.pth
*.tflite
# Ignore data files from libraries (e.g., from Hugging Face, TensorFlow Datasets)
# Ignore configuration files for specific tools
.idea/
.vscode/
# Ignore model training checkpoints (can be large)
checkpoint/
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# dependencies
/node_modules
/.pnp
.pnp.js
# testing
/coverage
# next.js
/.next/
/out/
# production
/build
# misc
*.pem
# debug
.pnpm-debug.log*
# local env files
.env*.local
# vercel
.vercel
# Ignore all .exe files
*.exe
# Ignore all .mp4 files
*.svg
*.txt
.env/
# Jupyter Notebook checkpoints
# Logs and database files
*.sqlite3
# Data files
*.csv
*.h5
*.parquet
*.feather
*.pkl
*.joblib
# ML artifacts
model/
checkpoints/
*.onnx
*.pb
# Cache and temporary files
cache/
*.cache
*.tensorboard
wandb/
mlruns/
# IDE / Editor-specific files
Thumbs.db
# Ignore PowerPoint files
*.ppt
*.pptx
# Ignore PDF files
*.pdf
# Ignore text files
# Ignore all image file types
*.png
*.jpg
*.jpeg
*.gif
*.bmp
*.tiff
*.tif
*.webp
*.ico
*.heic
*.heif
*.avif
# Ignore common large file types
*.iso
*.tar
*.gz
*.rar
*.7z
*.dmg
*.pkg
*.jar
*.war
*.dll
*.bin
# Ignore large logs and temp files
*.tmp
# Ignore all video file types
*.flv
*.wmv
*.webm
*.mpeg
*.mpg
*.3gp
*.ogv
# Ignore all audio file types
*.aac
*.wma
*.opus
*.amr
# Ignore all Excel file types
*.xls
*.xlsx
*.xlsm
*.xlsb
*.xltx
*.xltm
*.ods
# Ignore CSV files
# ========== PYTHON ==========
**/__pycache__/
**/*.py[cod]
**/*.so
**/*.egg
**/*.egg-info/
**/.Python
**/ENV/
**/.env
**/.venv/
# Jupyter
**/.ipynb_checkpoints/
# Django
**/db.sqlite3
**/media/
**/staticfiles/
# Flask / FastAPI
**/instance/
# Packaging
**/dist/
**/build/
# Testing & Coverage
**/.tox/
**/.coverage
**/.cache
**/htmlcov/
**/coverage.xml
**/*.cover
**/*.py,cover
# Typing
**/.mypy_cache/
**/.pyre/
# ========== NODE.JS ==========
**/node_modules/
**/npm-debug.log*
**/yarn-debug.log*
**/yarn-error.log*
**/package-lock.json
**/yarn.lock
**/.npm/
**/.nvm/
# ========== REACT ==========
**/public/static/
**/.next/
**/.parcel-cache/
**/.turbo/
**/coverage/
**/.eslintcache
# ========== COMMON FILES ==========
**/*.log
# IDEs
**/.idea/
**/.vscode/
# Images
**/*.png
**/*.jpg
**/*.jpeg
**/*.gif
**/*.bmp
**/*.tiff
**/*.ico
**/*.svg
**/images/
# Data Files
**/*.csv
**/*.tsv
**/*.txt
**/*.xls
**/*.xlsx
**/*.json
**/*.xml
**/*.yaml
**/*.yml
# Document Files
**/*.pdf
**/*.doc
**/*.docx
# Models / Binaries
**/*.h5
**/*.hdf5
**/*.pkl
**/*.joblib
**/*.pt
**/*.onnx
**/*.pb
**/*.tflite
**/*.bin
**/*.ckpt
# ========== OS / SYSTEM ==========
**/.DS_Store
**/Thumbs.db
**/desktop.ini
# ========== DOCKER ==========
**/*.pid
**/*.pidfile
**/docker-compose.override.yml
# Python cache and builds
**/*.nbconvert.ipynb
# Virtual envs (any level)
# Logs and output
**/*.out
**/*.err
# Data and models
**/*.zip
**/*.tar.gz
**/*.npy
**/*.npz
# IDE and editor
*.code-workspace
# OS
# Configs and misc
.env.*
# Ignore Python bytecode and optimized files in any folder
# Test/coverage reports and similar artifacts
# Django artifacts
# Flask artifacts
# Scrapy artifacts
# Sphinx documentation builds
# PyBuilder build
# Jupyter Notebook & IPython
# Virtual Environments (matches any folder named env or similar)
# Type checkers and debugging caches
# IDE / Editor-specific directories and settings (anywhere)
# Operating system artifacts
desktop.ini
# Logs and temporary files
# Archives and media files (adjust as necessary)
# Documents (adjust as necessary)
*.doc
*.docx
# Node.js dependencies
# ML / Data Science artifacts
# Ignore uv's local package directory
# Ignore virtual environments (uv can use .venv)
# Python bytecode and cache
# OS files
# Gradle files and folders
.gradle/
*/build/
!gradle/wrapper/gradle-wrapper.jar
!**/build.gradle
!**/build.gradle.kts
!gradlew
!gradlew.bat
!**/settings.gradle
!**/settings.gradle.kts
!**/gradle.properties
# Machine Learning - Common include/exclude
*.tflite        # TensorFlow Lite model files (if generated, not source)
*.pb            # Protocol buffer model files
*.h5            # Keras model files
# ML model assets (if generated or large models not meant for version control)
app/src/main/assets/*.tflite
app/src/main/assets/*.pb
app/src/main/assets/*.h5
# Local configuration
local.properties
# IDE files
*.iws
*.ipr
# Android Studio cache and settings
.idea/caches/
.idea/libraries/
.idea/modules.xml
.idea/workspace.xml
.idea/gradle.xml
.idea/usage.statistics.xml
.idea/dictionaries/
.idea/httpRequests/
# Kotlin build data (Kotlin 2.0+)
.kotlin/
# Keystore files (very sensitive)
*.jks
*.keystore
# Log files
# System files
# APK/Proguard artifacts
*.apk
*.ap_
*.dex
*.class
proguard/
proguard-rules.pro
# NDK output
ndkBuild/
# Misc
# Crashlytics and Fabric
crashlytics.properties
crashlytics-build.properties
fabric.properties
# Captured data and navigation editor files
captures/
.navigation/
# External Native Build artifacts
.externalNativeBuild/
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
/captures
.externalNativeBuild
.cxx
# === Gradle build directories ===
# === IDE & Android Studio ===
# === Local Android config ===
# === Keystore & security ===
# === Machine Learning artifacts (ignore if models generated or too large for VCS) ===
# === Log & temp files ===
# === System files ===
# === APK, outputs & binary artifacts ===
# === External & native build output ===
# === Crashlytics and Fabric ===
# === Misc ===
# (Add more patterns here if your workflow needs)
# === Negated: Keep essential Gradle scripts & wrappers in VCS ===
# --- General Python ---
# Virtual environments
# VSCode and PyCharm
.history
# --- Langchain ---
# Ignore environment and configuration files
.env.local
langchain.json
# Any cache or temporary data used by LangChain
langchain_cache/
# --- LangGraph ---
.langgraph_api/
.langgraph/
langgraph.json
# --- LM Studio ---
.lmstudio/
# If using js/ts plugins, ignore them as well
*.js
*.ts
# --- Ollama ---
ollama.syso
modelfile.*
.model/
models/
# You might want to ignore binary and cache files associated with ollama
# --- LLM Applications ---
# Any generated or cached files by frameworks
llm_cache/
llm_output/
# --- OS/Editor Files ---
# macOS files
# Windows files
# --- Additional Language/Environment Files ---
# Poetry
poetry.lock
# Pipenv
Pipfile.lock
# --- Exceptions: Track these files ---
!requirements.txt
!Pipfile
!poetry.lock
!langchain.json
!langgraph.json
# Python virtual environments (uv, venv, pipenv)
**/__pypackages__/
.python-version
**/.python-version
# uv cache
uv.cache/
**/uv.cache/
# Other standard Python ignores
# Environment variables - COMPREHENSIVE COVERAGE
.env*
**/.env.*
.env.development
.env.production
.env.staging
.env.test
.env.backup
.env.bak
.envrc
# UV specific
uv.lock
.env
__pycache__
.ipynb_checkpoints
.langgraph_api/
deep_research_from_scratch.egg-info/
*.pyc

# Testing
# IDE
# --- Comments ---
# Add any additional files generated by plugins, experiment scripts, etc, below
